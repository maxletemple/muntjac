CAPI=2:
# Copyright lowRISC contributors.
# Licensed under the Apache License, Version 2.0, see LICENSE for details.
# SPDX-License-Identifier: Apache-2.0
name: "lowrisc:muntjac:ncore_tb:0.1"
description: "Test of Muntjac Core"

filesets:
  files_rtl:
    depend:
      - lowrisc:tl:socket_1n
      - lowrisc:tl:adapter_bram
      - lowrisc:tl:io_terminator
      - lowrisc:tl:ram_terminator
      - lowrisc:muntjac:llc
      - lowrisc:muntjac:core
  
  files_assertions:
    depend:
      - lowrisc:tl_test:assertions

  files_verilator:
    files:
      - verilator/rtl/ncore_wrapper.sv
      - verilator/rtl/muntjac_core_wrapper.sv
    file_type: systemVerilogSource

  files_verilator_harness:
    depend:
      - lowrisc:muntjac:verilator_sim
    files:
      - verilator/src/core_harness.cc
    file_type: cppSource

  files_lint_verilator:
    files:
      - verilator/lint_waiver.vlt: {file_type: vlt}
      - verilator/lint_waiver_core.vlt: {file_type: vlt}

  files_lint_verible:
    files:
#      - lint/verible_waiver.vbw: {file_type: veribleLintWaiver}

parameters:
  TRACE_ENABLE:
    datatype: bool
    description: Enable extra debug outputs from the core.
    paramtype: vlogdefine

  RVFI:
    datatype: bool
    paramtype: vlogdefine

  SYNTHESIS:
    datatype: bool
    paramtype: vlogdefine

  FPGA_XILINX:
    datatype: bool
    description: Identifies Xilinx FPGA targets to set DSP pragmas for performance counters.
    default: false
    paramtype: vlogdefine


targets:
  default: &default_target
    filesets:
      - tool_verilator ? (files_lint_verilator)
      - tool_veriblelint ? (files_lint_verible)
      - files_rtl
      - tool_verilator ? (files_verilator)
    toplevel: core_wrapper
    parameters:
      - tool_vivado ? (FPGA_XILINX=true)
  lint:
    <<: *default_target
    parameters:
      - SYNTHESIS=true
      - RVFI=true
    default_tool: verilator
    tools:
      verilator:
        mode: lint-only
        verilator_options:
          - "-Wall"
          # RAM primitives wider than 64bit (required for ECC) fail to build in
          # Verilator without increasing the unroll count (see Verilator#1266)
          - "--unroll-count 72"
  format:
    filesets:
      - files_rtl
    parameters:
      - SYNTHESIS=true
      - RVFI=true
    default_tool: veribleformat
    toplevel: muntjac_pipeline
    tools:
      veribleformat:
        verible_format_args:
          - "--inplace"
  sim:
    filesets:
      - files_rtl
      - files_verilator
      - files_verilator_harness
      - assertions_on ? (files_assertions)
    parameters:
      - TRACE_ENABLE=true
    default_tool: verilator
    toplevel: core_wrapper
    tools:
      verilator:
        mode: cc
        verilator_options:
          - "-Wno-fatal"  # Ignore warnings; they are exposed by linting anyway
          - "-Wno-lint"
          - "-Wno-WIDTHCONCAT"
          - "-Wno-UNOPTFLAT"
          - "-o muntjac_ncore"
          - "--trace --trace-structs"
          - "--assert"
          - "--coverage-user --coverage-line"
          # coverage-toggle is also available, but is very slow for little gain
          - "-O3"  # Verilator optimisation
          - "-CFLAGS -O3"  # compiler optimisation
          - "-CFLAGS -DFST_ENABLE" # Either VCD_ENABLE or FST_ENABLE
          - "--trace-fst"          # Only if FST_ENABLE above
